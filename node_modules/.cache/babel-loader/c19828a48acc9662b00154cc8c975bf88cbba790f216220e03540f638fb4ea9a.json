{"ast":null,"code":"\n\n// import React, { useState, useEffect, useRef } from 'react';\n\n// const MODES = {\n//   pomodoro: { label: 'Pomodoro', duration: 25 * 60 },\n//   short: { label: 'Short Break', duration: 5 * 60 },\n//   long: { label: 'Long Break', duration: 15 * 60 },\n// };\n\n// export const TimeMngr = () => {\n//   const [mode, setMode] = useState('pomodoro');\n//   const [secondsLeft, setSecondsLeft] = useState(MODES[mode].duration);\n//   const [isRunning, setIsRunning] = useState(false);\n//   const [cycleCount, setCycleCount] = useState(0);\n//   const intervalRef = useRef(null);\n\n//   useEffect(() => {\n//     setSecondsLeft(MODES[mode].duration);\n//   }, [mode]);\n\n//   useEffect(() => {\n//     if (isRunning) {\n//       intervalRef.current = setInterval(() => {\n//         setSecondsLeft((prev) => {\n//           if (prev === 0) {\n//             clearInterval(intervalRef.current);\n//             handleTimerEnd();\n//             return 0;\n//           }\n//           return prev - 1;\n//         });\n//       }, 1000);\n//     }\n//     return () => clearInterval(intervalRef.current);\n//   }, [isRunning]);\n\n//   const handleTimerEnd = () => {\n//     if (mode === 'pomodoro') {\n//       const newCycle = cycleCount + 1;\n//       setCycleCount(newCycle);\n//       if (newCycle % 4 === 0) {\n//         setMode('long');\n//       } else {\n//         setMode('short');\n//       }\n//     } else {\n//       setMode('pomodoro');\n//     }\n//     setIsRunning(false);\n//   };\n\n//   const formatTime = (seconds) => {\n//     const mins = Math.floor(seconds / 60);\n//     const secs = seconds % 60;\n//     return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n//   };\n\n//   const handleStartPause = () => {\n//     setIsRunning((prev) => !prev);\n//   };\n\n//   const handleReset = () => {\n//     clearInterval(intervalRef.current);\n//     setIsRunning(false);\n//     setSecondsLeft(MODES[mode].duration);\n//   };\n\n//   const handleModeChange = (newMode) => {\n//     clearInterval(intervalRef.current);\n//     setIsRunning(false);\n//     setMode(newMode);\n//     setSecondsLeft(MODES[newMode].duration);\n//   };\n\n//   return (\n//     <div className=\"flex flex-col items-center bg-red-600 text-white p-8 rounded-lg w-80 mx-auto mt-10\">\n//       <div className=\"flex space-x-4 mb-6\">\n//         {Object.keys(MODES).map((m) => (\n//           <button\n//             key={m}\n//             className={`px-4 py-2 rounded ${\n//               mode === m ? 'bg-white text-red-600' : 'bg-red-500 text-white'\n//             }`}\n//             onClick={() => handleModeChange(m)}\n//           >\n//             {MODES[m].label}\n//           </button>\n//         ))}\n//       </div>\n//       <div className=\"text-6xl font-mono mb-6\">{formatTime(secondsLeft)}</div>\n//       <div className=\"flex space-x-4\">\n//         <button\n//           className=\"bg-white text-red-600 px-4 py-2 rounded hover:bg-gray-200\"\n//           onClick={handleStartPause}\n//         >\n//           {isRunning ? 'Pause' : 'Start'}\n//         </button>\n//         <button\n//           className=\"bg-white text-red-600 px-4 py-2 rounded hover:bg-gray-200\"\n//           onClick={handleReset}\n//         >\n//           Reset\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/nuriakh/Desktop/diplom2025/appdiplom/src/pages/time_mngr.jsx"],"sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n\n// const MODES = {\n//   pomodoro: { label: 'Pomodoro', duration: 25 * 60 },\n//   short: { label: 'Short Break', duration: 5 * 60 },\n//   long: { label: 'Long Break', duration: 15 * 60 },\n// };\n\n// export const TimeMngr = () => {\n//   const [mode, setMode] = useState('pomodoro');\n//   const [secondsLeft, setSecondsLeft] = useState(MODES[mode].duration);\n//   const [isRunning, setIsRunning] = useState(false);\n//   const [cycleCount, setCycleCount] = useState(0);\n//   const intervalRef = useRef(null);\n\n//   useEffect(() => {\n//     setSecondsLeft(MODES[mode].duration);\n//   }, [mode]);\n\n//   useEffect(() => {\n//     if (isRunning) {\n//       intervalRef.current = setInterval(() => {\n//         setSecondsLeft((prev) => {\n//           if (prev === 0) {\n//             clearInterval(intervalRef.current);\n//             handleTimerEnd();\n//             return 0;\n//           }\n//           return prev - 1;\n//         });\n//       }, 1000);\n//     }\n//     return () => clearInterval(intervalRef.current);\n//   }, [isRunning]);\n\n//   const handleTimerEnd = () => {\n//     if (mode === 'pomodoro') {\n//       const newCycle = cycleCount + 1;\n//       setCycleCount(newCycle);\n//       if (newCycle % 4 === 0) {\n//         setMode('long');\n//       } else {\n//         setMode('short');\n//       }\n//     } else {\n//       setMode('pomodoro');\n//     }\n//     setIsRunning(false);\n//   };\n\n//   const formatTime = (seconds) => {\n//     const mins = Math.floor(seconds / 60);\n//     const secs = seconds % 60;\n//     return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n//   };\n\n//   const handleStartPause = () => {\n//     setIsRunning((prev) => !prev);\n//   };\n\n//   const handleReset = () => {\n//     clearInterval(intervalRef.current);\n//     setIsRunning(false);\n//     setSecondsLeft(MODES[mode].duration);\n//   };\n\n//   const handleModeChange = (newMode) => {\n//     clearInterval(intervalRef.current);\n//     setIsRunning(false);\n//     setMode(newMode);\n//     setSecondsLeft(MODES[newMode].duration);\n//   };\n\n//   return (\n//     <div className=\"flex flex-col items-center bg-red-600 text-white p-8 rounded-lg w-80 mx-auto mt-10\">\n//       <div className=\"flex space-x-4 mb-6\">\n//         {Object.keys(MODES).map((m) => (\n//           <button\n//             key={m}\n//             className={`px-4 py-2 rounded ${\n//               mode === m ? 'bg-white text-red-600' : 'bg-red-500 text-white'\n//             }`}\n//             onClick={() => handleModeChange(m)}\n//           >\n//             {MODES[m].label}\n//           </button>\n//         ))}\n//       </div>\n//       <div className=\"text-6xl font-mono mb-6\">{formatTime(secondsLeft)}</div>\n//       <div className=\"flex space-x-4\">\n//         <button\n//           className=\"bg-white text-red-600 px-4 py-2 rounded hover:bg-gray-200\"\n//           onClick={handleStartPause}\n//         >\n//           {isRunning ? 'Pause' : 'Start'}\n//         </button>\n//         <button\n//           className=\"bg-white text-red-600 px-4 py-2 rounded hover:bg-gray-200\"\n//           onClick={handleReset}\n//         >\n//           Reset\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }"],"mappings":";;AAWA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}